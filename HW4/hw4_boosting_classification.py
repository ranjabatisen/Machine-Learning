# -*- coding: utf-8 -*-
"""hw4_boosting_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X8jckRRsI9FGvvm_SYY0J65zyZP4RWwt
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import test_error_rate as te

def blindboost(y, itr, learning_rate, N):
  minerror = te.error_rate(y)
  z = (itr + 1)/(itr + 2)
  for i in range(3000):
    y_random = np.random.randint(2,size=(N, 1))
    yp = ((y_random * learning_rate) + y)*z
    error_rate = te.error_rate(yp)
    if error_rate < minerror and i > 100:
      break
    elif error_rate < minerror:
      minerror = error_rate
    if (i+1) % 50 == 0:
      learning_rate /= 2
  return yp, error_rate

def main():
  learning_rate = 0.1
  N = 21283
  y = np.ones((N, 1))
  listoferrors = list()
  current_error_rate = 3
  prev_error_rate = 4
  itr = 0
  while prev_error_rate - current_error_rate > 0.000001:
    prev_error_rate = current_error_rate
    y, current_error_rate = blindboost(y, itr, learning_rate, N)
    print(current_error_rate)
    listoferrors.append(current_error_rate)
    itr = itr + 1
  # Plot of score vs no. of weak learners with blind boost
  plt.plot(listoferrors)
  plt.xlabel("No. of weak learners")
  plt.ylabel("Error rates")
  plt.title("Error rates vs No. of weak learners with blind boost")
  plt.show()
  

if __name__== "__main__":
    main()